<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetDir)APE.Umbraco.dll" #>
<#@ import namespace="APE.Umbraco.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="..\..\APE\FileManager.ttinclude" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#
	var code = new CodeGenerationTools(this);
	var namespaceHint = code.VsNamespaceSuggestion();

	var hostServiceProvider = (IServiceProvider)this.Host;
	var host = this.Host as ITextTemplatingEngineHost;
	var dte = (DTE)hostServiceProvider.GetService(typeof(DTE));
	var project = dte.Solution.FindProjectItem(host.TemplateFile).ContainingProject;

	var dataDir = host.ResolveAssemblyReference("$(ProjectDir)") + @"App_Data\";
	var outDir = host.ResolveAssemblyReference("$(ProjectDir)$(OutputPath)");
	
	System.Configuration.Configuration config = null;
	
	foreach (ProjectItem item in project.ProjectItems)
	{
		if (Regex.IsMatch(item.Name, "^(app|web).config$", RegexOptions.IgnoreCase))
		{
			config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap() { ExeConfigFilename = item.FileNames[0] }, ConfigurationUserLevel.None);
			break;
		}
	}

	var connectionSetting = config.ConnectionStrings.ConnectionStrings["umbracoDbDSN"];
	
	var manager = TemplateFileManager.Create(this);

	var connectionString = new APE.Umbraco.Core.Models.ConnectionStringContainer(){
		ConnectionString = connectionSetting.ConnectionString,
		ProviderName = connectionSetting.ProviderName,
		DataDir=dataDir
	};
	using(var helpers = new Helpers(outDir,connectionString)){
	var dictionary = helpers.GetDictionary().ToList();

	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion() #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---
<#
	manager.EndBlock();
#>
namespace <#= namespaceHint #>
{
	public static class Dictionary
	{
<#	foreach(var dictionaryItem in dictionary)
	{
#>
		public static string <#= dictionaryItem.Name  #> { get { return APE.Umbraco.UH.UmbracoHelper.GetDictionaryValue(DictionaryKeys.<#= dictionaryItem.Name  #>); } }
<#
	}
#>
	}
}
<#
	manager.StartNewFile("Umbraco.DictionaryKeys.cs");
#>
namespace <#= namespaceHint #>
{
	public static class DictionaryKeys
	{
<#
	foreach(var dictionaryItem in dictionary)
	{
#>
		public const string <#= dictionaryItem.Name #> = "<#= dictionaryItem.Alias #>";
<#
	}
#>
	}
}
<#
}
	manager.Process();
#>