<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetDir)APE.Umbraco.dll" #>
<#@ import namespace="APE.Umbraco.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ include file="..\..\APE\FileManager.ttinclude" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#
	var code = new CodeGenerationTools(this);
	var namespaceHint = code.VsNamespaceSuggestion();

	var hostServiceProvider = (IServiceProvider)this.Host;
	var host = this.Host as ITextTemplatingEngineHost;
	var dte = (DTE)hostServiceProvider.GetService(typeof(DTE));
	var project = dte.Solution.FindProjectItem(host.TemplateFile).ContainingProject;

	var dataDir = host.ResolveAssemblyReference("$(ProjectDir)") + @"App_Data\";

	System.Configuration.Configuration config = null;
	
	foreach (ProjectItem item in project.ProjectItems)
	{
		if (Regex.IsMatch(item.Name, "^(app|web).config$", RegexOptions.IgnoreCase))
		{
			config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap() { ExeConfigFilename = item.FileNames[0] }, ConfigurationUserLevel.None);
			break;
		}
	}

	var connectionSetting = config.ConnectionStrings.ConnectionStrings["umbracoDbDSN"];

	var manager = TemplateFileManager.Create(this);
	var docTypes = DBConnection.GetMemberTypes(dataDir, connectionSetting).ToList();
	var preValueLookup = DBConnection.GetPreValueLookup(dataDir, connectionSetting);

	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion() #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---
<# 
	manager.EndBlock();
#>
namespace <#= namespaceHint #>
{
	public static class MemberTypes
	{
<#	foreach(var docType in docTypes)
	{
		var docTypeKey = docType.ContentType;
#>
		private static <#=docTypeKey#> _<#=docTypeKey#>;
		public static <#=docTypeKey#> <#=docTypeKey#>
		{
			get { return _<#=docTypeKey#> ?? (_<#=docTypeKey#> = new <#=docTypeKey#>()); }
		}

<# 
	}
#>
	}
}

<#
foreach(var docType in docTypes)
{
	var docTypeKey = docType.ContentType;

	manager.StartNewFile(docTypeKey + ".cs");

#>
using System;
using APE.Umbraco;
namespace <#= namespaceHint #>
{
	public partial class <#=docTypeKey#>
	{
		public <#=docTypeKey#>()
		{
<#		foreach (var property in docType.Properties)
		{
#>
			this.<#=property.PropertyAliasText#> = new <#=property.PropertyTypeAlias#>() { Alias = "<#=property.PropertyAlias#>" };
<#
		}
#>
		}

		public static implicit operator string(<#=docTypeKey#> doctype)
		{
			return "<#=docType.ContentTypeAlias#>";
		}
<#		foreach (var property in docType.Properties.Where(x => !string.IsNullOrWhiteSpace(x.PropertyAlias)))
		{
			var preValues= preValueLookup[property.DataTypeId];
			var propType= property.GetValueTypeName(preValues);
#>

		///	<summary>
		///		<para>Datatype: <#=property.PropertyType#>.</para>
<#		if (!string.IsNullOrWhiteSpace(property.PropertyDescription))
		{
#>
		///		<para>Description: <#=property.PropertyDescription#></para>
<#
		}
#>
		///	</summary>
		public <#=propType#> <#=property.PropertyAliasText#> { get; private set; }
<#
		}
#>
	}
}
<#
}
manager.Process();
#>